---
import {
  contentfulClient,
  type TypeProfileFields,
  type TypeWorkExperienceFields,
  type TypeListedTechnologiesFields,
  type TypeEducationCollectionFields,
  type TypeEducationInformationFields,
  type TypeTechnologiesFields,
} from "../lib/contentful"; // Import necessary modules and types from Contentful
import { type Asset } from "contentful"; // Import Asset type from Contentful
import BaseLayout from "../layouts/BaseLayout.astro"; // Import the BaseLayout component

// Fetch profile entries from Contentful
const profileEntries = await contentfulClient.getEntries<TypeProfileFields>({
  content_type: "profile",
});

const technologyEntries =
  await contentfulClient.getEntries<TypeListedTechnologiesFields>({
    content_type: "listedTechnologies",
  });

const educationEntries =
  await contentfulClient.getEntries<TypeEducationCollectionFields>({
    content_type: "educationCollection",
  });

// Extract fields from the fetched profile entry
const profileFields = profileEntries.items[0].fields;
const { title, about } = profileFields;

// Explicitly type fields
const workExperience =
  profileFields.workExperience as TypeWorkExperienceFields[];
const profilePicture = profileFields.profilePicture
  ? (profileFields.profilePicture as Asset)
  : null;
const imageUrl = (profilePicture?.fields.file?.url as string) ?? "";
const imageAlt = (profilePicture?.fields?.title as string) ?? "";
---

<BaseLayout
  pageTitle="About"
  pageDescription="Learn more about me and my experience."
>
  <section
    class="container mx-auto flex flex-col items-center justify-center min-h-screen px-4"
  >
    <!-- Main container for the About section -->
    <div class="mt-8 flex flex-col items-center w-full">
      <!-- Container for profile picture and title -->
      <div>
        {
          profilePicture && (
            <img
              src={imageUrl}
              alt={imageAlt}
              class="w-48 h-48 object-cover rounded-full border-2 border-primaryTeal mx-auto mb-8"
            />
          )
        }
      </div>
      <h1 class="text-4xl font-thin text-primaryTeal text-center">{title}</h1>
      <div class="mt-8 w-full flex justify-center">
        <p class="mt-4 text-primaryWhite text-justify w-3/4">{about}</p>
      </div>
      <div
        class="mt-8 w-full grid grid-cols-1 sm:grid-cols-2 gap-10 justify-center"
      >
        <!-- Container for Work Experience and Education sections -->
        <div class="text-center">
          <h2 class="text-2xl font-thin text-primaryTeal">Work Experience</h2>
          {
            workExperience
              //Sort work experience by start date in descending order
              .sort(
                (a, b) =>
                  new Date(b.fields.startDate).getTime() -
                  new Date(a.fields.startDate).getTime()
              )
              .map((experience: TypeWorkExperienceFields) => {
                const companyUrl =
                  (experience.fields.companyUrl as string) ?? "";
                return (
                  <div class="mt-4 text-primaryWhite text-justify mb-12">
                    {/* //Conditionally Render company logo if it exists and add a
                    link if it exists */}
                    {experience.fields.companyLogo &&
                      experience.fields.companyLogo.fields.file &&
                      experience.fields.companyLogo.fields.file.url &&
                      (companyUrl ? (
                        <a
                          href={companyUrl}
                          target="_blank"
                          rel="noopener noreferrer"
                        >
                          <img
                            src={
                              experience.fields.companyLogo.fields.file
                                .url as string
                            }
                            alt={
                              experience.fields.companyLogo.fields
                                .title as string
                            }
                            class="w-16 h-16 mb-4"
                          />
                        </a>
                      ) : (
                        <img
                          src={
                            experience.fields.companyLogo.fields.file
                              .url as string
                          }
                          alt={
                            experience.fields.companyLogo.fields.title as string
                          }
                          class="w-16 h-16 mb-4"
                        />
                      ))}
                    <h3 class="text-xl font-thin mb-4 text-primaryTeal uppercase">
                      {experience.fields.title}
                    </h3>
                    <p class="mb-2 uppercase">
                      {experience.fields.companyName}
                    </p>
                    <p class="italic mb-2">
                      {new Date(experience.fields.startDate).toLocaleDateString(
                        "en-US",
                        { year: "numeric", month: "long" }
                      )}{" "}
                      -{" "}
                      {experience.fields.endDate
                        ? new Date(
                            experience.fields.endDate
                          ).toLocaleDateString("en-US", {
                            year: "numeric",
                            month: "long",
                          })
                        : "Present"}
                    </p>
                    <p>{experience.fields.description}</p>
                  </div>
                );
              })
          }
        </div>
        <div class="text-center">
          <!--  Education  -->
          <h2 class="text-2xl font-thin text-primaryTeal mb-12">Education</h2>
          {
            educationEntries.items.map((education) => (
              <div class="mt-4 text-primaryWhite text-left">
                <h1 class="text-xl font-bold mt-8 mb-8 text-primaryWhite">
                  {education.fields.title}
                </h1>
                {(
                  education.fields
                    .collection as TypeEducationInformationFields[]
                ).map((item) => (
                  <div class="mt-2">
                    {item.fields.url ? (
                      <a
                        href={item.fields.url}
                        target="_blank"
                        rel="noopener noreferrer"
                        class="text-primaryWhite hover:text-primaryTeal"
                      >
                        <h2>{item.fields.name}</h2>
                      </a>
                    ) : (
                      <h2 class="text-primaryTeal">{item.fields.name}</h2>
                    )}
                    <p>{item.fields.description}</p>
                  </div>
                ))}
              </div>
            ))
          }
        </div>
      </div>
      <div class="mt-8 text-center w-full">
        <!--  Preferred Tech  -->
        <h2 class="text-2xl font-thin text-primaryTeal">
          Preferred Technologies
        </h2>
        <div class="flex flex-wrap justify-center mt-4">
          {
            technologyEntries.items.map((technology) => (
              <div class="mt-4 text-primaryWhite text-center md:border-l md:border-r border-primaryTeal border-opacity-10">
                <h1 class="text-xl font-bold mt-8 mb-8 text-primaryWhite">
                  {technology.fields.collectionName}
                </h1>
                <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 w-full mb-24">
                  {(
                    technology.fields
                      .listedTechnologies as TypeTechnologiesFields[]
                  ).map((tech: TypeTechnologiesFields) => {
                    const techURL = tech.fields.technologyUrl as string;
                    const techName =
                      typeof tech.fields.technologyName === "string"
                        ? tech.fields.technologyName
                        : "";
                    const techLogo = tech.fields.technologyLogo as Asset;
                    const techLogoURL =
                      typeof techLogo.fields.file?.url === "string"
                        ? techLogo.fields.file.url
                        : "";
                    const imageAlt =
                      typeof techLogo.fields.title === "string"
                        ? techLogo.fields.title
                        : "";
                    const imageDescription =
                      typeof techLogo.fields.description === "string"
                        ? techLogo.fields.description
                        : "";
                    return (
                      <div class="flex flex-col items-center p-4">
                        <a
                          href={techURL}
                          target="_blank"
                          rel="noopener noreferrer"
                          class="flex flex-col items-center w-full"
                        >
                          <img
                            src={techLogoURL}
                            alt={imageAlt}
                            title={imageDescription}
                            class="w-10 h-10"
                          />
                          <p class="text-primaryWhite hover:text-primaryTeal text-center mt-2">
                            {techName}
                          </p>
                        </a>
                      </div>
                    );
                  })}
                </div>
              </div>
            ))
          }
        </div>
      </div>
    </div>
  </section>
</BaseLayout>
